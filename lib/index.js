// Generated by CoffeeScript 1.10.0
(function() {
  var assert, defaults, fs, getTemplatePath, helpers, mkdirp, path, pug, url,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  fs = require('fs');

  pug = require('pug');

  url = require('url');

  assert = require('assert');

  mkdirp = require('mkdirp');

  helpers = require('./helpers');

  defaults = {
    pug: {},
    useIndex: true,
    listenExt: ['.pug', '.htm', '.html'],
    templateExt: ['.pug'],
    outputExt: '.html',
    maxAge: 0,
    force: false,
    saveOutput: true,
    prefix: ''
  };

  getTemplatePath = function(name, config) {
    var ext, i, len, ref, templatePath;
    ref = config.templateExt;
    for (i = 0, len = ref.length; i < len; i++) {
      ext = ref[i];
      templatePath = path.join(config.src, name + ext);
      if (fs.existsSync(templatePath)) {
        return templatePath;
      }
    }
    return false;
  };

  module.exports = function(config) {
    config = helpers.extend(defaults, config);
    assert(config.src, 'src should be set');
    assert(config.dest, 'dest should be set');
    assert(config.maxAge >= 0, 'maxAge cannot be negative');
    assert(config.templateExt, 'templateExt should be set');
    assert(Array.isArray(config.templateExt), 'templateExt should be an array');
    return function(req, res, next) {
      var extension, fullname, name, parsed, templatePath;
      parsed = url.parse(req.originalUrl);
      fullname = parsed.pathname.replace(config.prefix, '');
      extension = path.extname(fullname);
      name = fullname.substr(0, fullname.length - extension.length);
      if (config.useIndex && !extension) {
        name = path.join(name, 'index');
        extension = config.templateExt[0];
      }
      if (indexOf.call(config.listenExt, extension) < 0) {
        return next();
      }
      templatePath = getTemplatePath(name, config);
      if (!templatePath) {
        return next();
      }
      if (!(templatePath.indexOf(config.src)) === 0) {
        return res.sendStatus(403);
      }
      res.setHeader('Content-Type', 'text/html; charset=utf-8');
      res.setHeader('Cache-Control', "max-age=" + config.maxAge);
      res.setHeader('Expires', (new Date(+(new Date) + config.maxAge)).toGMTString());
      return fs.stat(templatePath, function(err, stat) {
        var target;
        if (err) {
          return next(err);
        }
        if (!stat.isFile()) {
          return next();
        }
        target = path.join(config.dest, name + config.outputExt);
        return fs.stat(target, function(err, stat) {
          if (!err && stat.isFile() && !config.force) {
            return fs.readFile(target, 'utf8', function(err, html) {
              if (err) {
                return next(err);
              }
              res.setHeader('Content-Length', Buffer.byteLength(html));
              return res.end(html);
            });
          } else {
            return pug.renderFile(templatePath, config.pug, function(err, html) {
              if (err) {
                return next(err);
              }
              if (config.saveOutput) {
                mkdirp(path.dirname(target), function(err) {
                  if (err) {
                    return next(err);
                  }
                  return fs.writeFile(target, html);
                });
              }
              res.setHeader('Content-Length', Buffer.byteLength(html));
              return res.end(html);
            });
          }
        });
      });
    };
  };

}).call(this);
